{"version":3,"file":"input-autocomplete-base.js","sourceRoot":"","sources":["../../src/input-autocomplete-base.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    LitElement,\n    property,\n    PropertyValues\n} from 'lit-element';\n\nimport { AutoCompleteSuggestion } from './models/autocomplete-suggestion';\nimport { ComponentCssClasses } from './models/component-css-classes';\nimport { Key } from './models/key';\n\nimport { InputModes } from './types/input-modes';\n\nimport { AutoCompleteSuggestions } from './services/autocomplete-suggestions';\n\nconst CUSTOM_EVENT_NAME_SELECTED = 'selected';\nconst CUSTOM_EVENT_NAME_UNSELECTED = 'unselected';\n\nconst EVENT_HANDLER_DELAY = (timeInMilliseconds: number) => new Promise((resolve: () => void) => {\n    setTimeout(function () { resolve(); }, timeInMilliseconds);\n});\n\nexport abstract class InputAutoCompleteBase extends LitElement {\n\n    static suggestionGeneratorPropertyName = 'suggestionGenerator';\n\n    activeSuggestionIndex = -1;\n    componentActive = false;\n\n    protected _autoCompleteSuggestions = new AutoCompleteSuggestions();\n\n    @property({ type: String }) inputId = '';\n    @property({ type: String }) placeholder = '';\n    @property({ type: String }) text = '';\n    @property({ type: String }) value = '';\n\n    @property({ type: Boolean }) disabled = false;\n    @property({ type: Boolean }) required = true;\n\n    @property({ type: Number }) maxSuggestions = 5;\n    @property({ type: Number }) minInput = 0;\n\n    @property({ type: Object }) cssClasses = new ComponentCssClasses();\n    @property({ type: Object }) inputMode: InputModes = 'none';\n\n    @property({ type: Object }) suggestionGenerator: (text: string) => Promise<AutoCompleteSuggestion[]> = () => Promise.resolve([]);\n\n    clearData(): void {\n        this._autoCompleteSuggestions?.clearData();\n        this.activeSuggestionIndex = -1;\n        this.componentActive = false;\n    }\n\n    clearOrClose(): void {\n\n        if (!this.componentActive) {\n            return;\n        }\n\n        if (this.value) {\n            this.clearData();\n        } else {\n            this.close();\n        }\n    }\n\n    clearSelection(clearOnlyValue = false): void {\n        if (this.value !== '') {\n            this.dispatchCustomEvent(\n                CUSTOM_EVENT_NAME_UNSELECTED,\n                { detail: { text: this.text, value: this.value } }\n            );\n            this.value = '';\n        }\n\n        if (!clearOnlyValue) {\n            this.text = '';\n        }\n    }\n\n    close(): void {\n        this.clearSelection();\n        this.clearData();\n    }\n\n    dispatchCustomEvent(eventName: string, data: { detail: any }): void {\n        switch (eventName) {\n            case CUSTOM_EVENT_NAME_SELECTED:\n            case CUSTOM_EVENT_NAME_UNSELECTED:\n                this.dispatchEvent(new CustomEvent(eventName, data));\n                break;\n        }\n    }\n\n    getSuggestionsCssClasses(index: number): string {\n        return `${this.cssClasses.suggestion}${(this.activeSuggestionIndex === index) ? ' ' + this.cssClasses.active : ''}`;\n    }\n\n    handleActivation(key: string): void {\n        if (!this._autoCompleteSuggestions?.hasSuggestionData()) {\n            return;\n        }\n\n        const isKeyDown = (key === Key.ArrowDown);\n\n        //#region functional members:\n\n        const activeSuggestionIndexIsValid = () => (\n            (this.activeSuggestionIndex + 1) < this._autoCompleteSuggestions?.getSuggestionDataCount());\n        const setActiveSuggestionIndexBoundary = () => {\n            if (isKeyDown) {\n                this.activeSuggestionIndex = 0;\n            } else if (!isKeyDown && (this.activeSuggestionIndex) > 0) {\n                this.activeSuggestionIndex -= 1;\n            } else if (!isKeyDown) {\n                this.activeSuggestionIndex = this._autoCompleteSuggestions?.getSuggestionDataCount() - 1;\n            }\n        };\n\n        //#endregion\n\n        if (isKeyDown && activeSuggestionIndexIsValid()) {\n            this.activeSuggestionIndex += 1;\n        } else {\n            setActiveSuggestionIndexBoundary();\n        }\n    }\n\n    handleBlur(e: FocusEvent): void {\n        if (!e) {\n            console.error(`The expected \\`${FocusEvent.name}\\` is not here.`);\n            return;\n        }\n\n        e.preventDefault();\n        EVENT_HANDLER_DELAY(250).then(this.clearOrClose);\n    }\n\n    handleFocus(e: FocusEvent): void {\n        if (!e) {\n            console.error(`The expected \\`${FocusEvent.name}\\` is not here.`);\n            return;\n        }\n\n        e.preventDefault();\n        this.componentActive = true;\n    }\n\n    handleKeyDown(e: KeyboardEvent): void {\n        if (!e) {\n            console.error(`The expected \\`${KeyboardEvent.name}\\` is not here.`);\n            return;\n        }\n\n        switch (e.key) {\n            case Key.ArrowDown:\n            case Key.ArrowUp:\n                e.preventDefault();\n                this.handleActivation(e.key);\n                break;\n\n            case Key.Enter:\n            case Key.Tab:\n                e.preventDefault();\n                this.handleSuggestionSelection(this.activeSuggestionIndex);\n                break;\n\n            case Key.Escape:\n                this.close();\n                break;\n        }\n    }\n\n    async handleKeyUp(e: KeyboardEvent): Promise<void> {\n        if (!e) {\n            console.error(`The expected \\`${KeyboardEvent.name}\\` is not here.`);\n            return;\n        }\n\n        if (!e.target) {\n            console.error('The expected KeyboardEvent EventTarget is not here.');\n            return;\n        }\n\n        const text: string = e.target['value'];\n\n        switch (e.key) {\n            case Key.ArrowDown:\n            case Key.ArrowUp:\n            case Key.Enter:\n            case Key.Tab:\n            case Key.Escape:\n                this.clearSelection(true);\n                break;\n\n            default:\n                this.componentActive = true;\n\n                await this._autoCompleteSuggestions?.prepareSuggestions(text);\n\n                await this.requestUpdate();\n\n                break;\n        }\n    }\n\n    handleSuggestionSelection(suggestionIndex: number): void {\n        //#region functional members:\n\n        const suggestionIndexIsValid = () =>\n            suggestionIndex >= 0 &&\n            suggestionIndex < this._autoCompleteSuggestions?.getSuggestionDataCount();\n\n        const setTextAndValue = () => {\n            const datum = this._autoCompleteSuggestions?.getSuggestionDatum(suggestionIndex);\n            this.text = datum.text;\n            this.value = datum.value;\n        };\n\n        //#endregion\n\n        if (suggestionIndexIsValid()) {\n            setTextAndValue();\n            this.dispatchCustomEvent(\n                CUSTOM_EVENT_NAME_SELECTED,\n                { detail: this._autoCompleteSuggestions?.getSuggestionDatum(suggestionIndex) }\n            );\n            this.clearData();\n        }\n    }\n\n    updated(changedProperties: PropertyValues) {\n        super.updated(changedProperties);\n\n        if (changedProperties.has(InputAutoCompleteBase.suggestionGeneratorPropertyName)) {\n            this._autoCompleteSuggestions.suggestionGenerator = this.suggestionGenerator;\n        }\n    }\n}\n"]}