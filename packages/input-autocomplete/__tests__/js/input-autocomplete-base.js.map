{"version":3,"file":"input-autocomplete-base.js","sourceRoot":"","sources":["../../src/input-autocomplete-base.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    LitElement,\n    property,\n    PropertyValues\n} from 'lit-element';\n\nimport { AutoCompleteSuggestion } from './models/autocomplete-suggestion';\nimport { ComponentCssClasses } from './models/component-css-classes';\nimport { Key } from './models/key';\n\nimport { CssTextAlignment } from './types/css-text-alignment';\nimport { InputModes } from './types/input-modes';\n\nimport { AutoCompleteSuggestions } from './services/autocomplete-suggestions';\n\nconst CUSTOM_EVENT_NAME_SELECTED = 'selected';\nconst CUSTOM_EVENT_NAME_UNSELECTED = 'unselected';\n\nconst EVENT_HANDLER_DELAY = (timeInMilliseconds: number) => new Promise((resolve: () => void) => {\n    setTimeout(function () { resolve(); }, timeInMilliseconds);\n});\n\n/**\n * defines the base class for this Web Component\n *\n * @extends {LitElement}\n */\nexport abstract class InputAutoCompleteBase extends LitElement {\n\n    /**\n     * the conventional property name of `this.suggestionGenerator`\n     */\n    static suggestionGeneratorPropertyName = 'suggestionGenerator';\n\n    /**\n     * tracks the active @type {AutoCompleteSuggestion} in the DOM\n     */\n    activeSuggestionIndex = -1;\n\n    /**\n     * when `true` the `input` element has received focus\n     */\n    componentActive = false;\n\n    /**\n     * exposes the @type {AutoCompleteSuggestions} service\n     * to subclasses\n     */\n    protected _autoCompleteSuggestions = new AutoCompleteSuggestions();\n\n    /**\n     * LitElement property/attribute\n     * for the ID of the `input` element\n     */\n    @property({ type: String }) inputId = '';\n\n    /**\n     * LitElement property/attribute\n     * for the text alignment\n     * of @type {AutoCompleteSuggestion} elements\n     */\n    @property({ type: String }) cssSuggestionAlignment: CssTextAlignment | '' = '';\n\n    /**\n     * LitElement property/attribute\n     * for the CSS block\n     * of @type {AutoCompleteSuggestion} element command\n     * (usually a `button` element)\n     * @example `cssSuggestionSelectedCommand=\"font-weight: bold;\"`\n     */\n    @property({ type: String }) cssSuggestionSelectedCommand = '';\n\n    /**\n     * LitElement property/attribute\n     * for the CSS block\n     * of @type {AutoCompleteSuggestion} element command\n     * (usually a `li` element)\n     * @example `cssSuggestionSelectedContainer=\"border: solid red;\"`\n     */\n    @property({ type: String }) cssSuggestionSelectedContainer = '';\n\n    /**\n     * LitElement property/attribute\n     * for the CSS width of this Web Component\n     */\n    @property({ type: String }) cssWidth = '';\n\n    /**\n     * LitElement property/attribute\n     * for the placeholder value\n     * of the `input` element\n     */\n    @property({ type: String }) placeholder = '';\n\n    /**\n     * LitElement property/attribute\n     * for the text displayed in the `input` element\n     */\n    @property({ type: String }) text = '';\n\n    /**\n     * LitElement property/attribute\n     * for the value selected by this Web Component\n     */\n    @property({ type: String }) value = '';\n\n    /**\n     * LitElement property/attribute\n     * determining whether this Web Component is\n     * enabled or disabled in the DOM\n     */\n    @property({ type: Boolean }) disabled = false;\n\n    /**\n     * LitElement property/attribute\n     * determining whether this Web Component\n     * value is required\n     */\n    @property({ type: Boolean }) required = true;\n\n    /**\n     * LitElement property/attribute\n     * setting the base `z-index` value\n     * upon which any `z-index` values\n     * in this Web Component ascend.\n     */\n    @property({ type: Number }) cssZIndexBase = 0;\n\n    /**\n     * LitElement property/attribute\n     * setting the maximum number\n     * of @type {AutoCompleteSuggestion} elements\n     * to display\n     */\n    @property({ type: Number }) maxSuggestions = 5;\n\n    /**\n     * LitElement property/attribute\n     * setting the minimum number\n     * of text characters entered\n     * before @type {AutoCompleteSuggestion} elements\n     * are displayed\n     */\n    @property({ type: Number }) minInput = 0;\n\n    /**\n     * LitElement property/attribute\n     * for all of the CSS class names\n     * of this Web Component\n     */\n    @property({ type: Object }) cssClasses = new ComponentCssClasses();\n\n    /**\n     * LitElement property/attribute\n     * for the input mode of the `input` element\n     * for OS virtual keyboards\n     */\n    @property({ type: Object }) inputMode: InputModes = 'none';\n\n    /**\n     * LitElement property/attribute\n     * for the generation strategy\n     * of @type {AutoCompleteSuggestion} elements\n     */\n    @property({ type: Object }) suggestionGenerator: (text: string) => Promise<AutoCompleteSuggestion[]> = () => Promise.resolve([]);\n\n    /**\n     * clear the @type {AutoCompleteSuggestion} data\n     * and call `.requestUpdate()`\n     */\n    async clearSuggestionData(): Promise<void> {\n        this._autoCompleteSuggestions?.clearData();\n\n        await this.requestUpdate();\n\n        this.activeSuggestionIndex = -1;\n        this.componentActive = false;\n    }\n\n    /**\n     * clear any @type {AutoCompleteSuggestion}\n     * previously selected\n     */\n    clearSuggestionSelection(clearOnlyValue = false): void {\n        if (this.value !== '') {\n            this.dispatchCustomEvent(\n                CUSTOM_EVENT_NAME_UNSELECTED,\n                { detail: { text: this.text, value: this.value } }\n            );\n            this.value = '';\n        }\n\n        if (!clearOnlyValue) {\n            this.text = '';\n        }\n    }\n\n    /**\n     * clear @type {AutoCompleteSuggestion} data\n     * and selection\n     */\n    async close(): Promise<void> {\n        this.clearSuggestionSelection();\n\n        await this.clearSuggestionData();\n\n    }\n\n    /**\n     * emit the custom events of this Web Component\n     */\n    dispatchCustomEvent(eventName: string, data: { detail: any }): void {\n        switch (eventName) {\n            case CUSTOM_EVENT_NAME_SELECTED:\n            case CUSTOM_EVENT_NAME_UNSELECTED:\n                this.dispatchEvent(new CustomEvent(eventName, data));\n                break;\n        }\n    }\n\n    /**\n     * get CSS class names related\n     * to @type {AutoCompleteSuggestion} elements\n     */\n    getSuggestionsCssClasses(index: number): string {\n        return `${this.cssClasses.suggestion}${(this.activeSuggestionIndex === index) ? ' ' + this.cssClasses.active : ''}`;\n    }\n\n    /**\n     * handle the blur event of the `input` element\n     * of this Web Component\n     */\n    async handleBlur(e: FocusEvent): Promise<void> {\n        if (!e) {\n            console.error(`The expected \\`${FocusEvent.name}\\` is not here.`);\n            return;\n        }\n\n        e.preventDefault();\n\n        await EVENT_HANDLER_DELAY(250);\n\n        await this.close();\n    }\n\n    /**\n     * handle the focus event of the `input` element\n     * of this Web Component\n     */\n    handleFocus(e: FocusEvent): void {\n        if (!e) {\n            console.error(`The expected \\`${FocusEvent.name}\\` is not here.`);\n            return;\n        }\n\n        this.componentActive = true;\n    }\n\n    /**\n     * handle the `keydown` event of the `input` element\n     * of this Web Component\n     */\n    async handleKeyDown(e: KeyboardEvent): Promise<void> {\n        if (!e) {\n            console.error(`The expected \\`${KeyboardEvent.name}\\` is not here.`);\n            return;\n        }\n\n        switch (e.key) {\n            case Key.ArrowDown:\n            case Key.ArrowUp:\n                this.setActiveSuggestionIndex(e.key);\n                this.handleSuggestionSelection(this.activeSuggestionIndex);\n                break;\n\n            case Key.Enter:\n            case Key.Tab:\n                e.preventDefault();\n                this.handleSuggestionClick(this.activeSuggestionIndex);\n                break;\n\n            case Key.Escape:\n\n                await this.close();\n\n                break;\n        }\n    }\n\n    /**\n     * handle the `keyup` event of the `input` element\n     * of this Web Component\n     */\n    async handleKeyUp(e: KeyboardEvent): Promise<void> {\n        if (!e) {\n            console.error(`The expected \\`${KeyboardEvent.name}\\` is not here.`);\n            return;\n        }\n\n        if (!e.target) {\n            console.error('The expected KeyboardEvent EventTarget is not here.');\n            return;\n        }\n\n        const text: string = e.target['value'];\n\n        switch (e.key) {\n            case Key.ArrowDown:\n            case Key.ArrowUp:\n            case Key.Enter:\n            case Key.Tab:\n            case Key.Escape:\n                e.preventDefault();\n                this.clearSuggestionSelection(true);\n                break;\n\n            default:\n\n                await this.prepareSuggestions(text);\n\n                break;\n        }\n    }\n\n    /**\n     * handle the click event\n     * of a selected @type {AutoCompleteSuggestion} element\n     * of this Web Component\n     */\n    async handleSuggestionClick(suggestionIndex: number): Promise<void> {\n        //#region functional members:\n\n        const suggestionIndexIsValid = () =>\n            suggestionIndex >= 0 &&\n            suggestionIndex < this._autoCompleteSuggestions?.getSuggestionDataCount();\n\n        const setTextAndValue = () => {\n            const datum = this._autoCompleteSuggestions?.getSuggestionDatum(suggestionIndex);\n            this.text = datum.text;\n            this.value = datum.value;\n        };\n\n        //#endregion\n\n        if (suggestionIndexIsValid()) {\n            setTextAndValue();\n            this.dispatchCustomEvent(\n                CUSTOM_EVENT_NAME_SELECTED,\n                {\n                    detail: this._autoCompleteSuggestions\n                        ?.getSuggestionDatum(suggestionIndex)\n                }\n            );\n\n            await this.clearSuggestionData();\n\n        }\n    }\n\n    /**\n     * prepares @type {AutoCompleteSuggestion} element display\n     * based on the specified text input\n     */\n    async prepareSuggestions(text: string): Promise<void> {\n\n        await this._autoCompleteSuggestions?.prepareSuggestions(text);\n\n        await this.requestUpdate();\n    }\n\n    /**\n     * sets `this.activeSuggestionIndex`\n     * based on the specified Arrow-key input\n     */\n    setActiveSuggestionIndex(key: string): void {\n        if (!this._autoCompleteSuggestions?.hasSuggestionData()) {\n            return;\n        }\n\n        const isArrowDownKey = (key === Key.ArrowDown);\n\n        //#region functional members:\n\n        const activeSuggestionIndexIsValid = () => (\n            (this.activeSuggestionIndex + 1) < this._autoCompleteSuggestions?.getSuggestionDataCount());\n        const setActiveSuggestionIndexBoundary = () => {\n            if (isArrowDownKey) {\n                this.activeSuggestionIndex = 0;\n            } else if (!isArrowDownKey && (this.activeSuggestionIndex) > 0) {\n                this.activeSuggestionIndex -= 1;\n            } else if (!isArrowDownKey) {\n                this.activeSuggestionIndex = this._autoCompleteSuggestions?.getSuggestionDataCount() - 1;\n            }\n        };\n\n        //#endregion\n\n        if (isArrowDownKey && activeSuggestionIndexIsValid()) {\n            this.activeSuggestionIndex += 1;\n        } else {\n            setActiveSuggestionIndexBoundary();\n        }\n    }\n\n    /**\n     * conventional LitElement method\n     */\n    updated(changedProperties: PropertyValues) {\n        super.updated(changedProperties);\n\n        if (changedProperties.has(InputAutoCompleteBase.suggestionGeneratorPropertyName)) {\n            this._autoCompleteSuggestions.suggestionGenerator = this.suggestionGenerator;\n        }\n    }\n\n    /**\n     * requires sub-classes\n     * to handle @type {AutoCompleteSuggestion} element selection\n     */\n    protected abstract handleSuggestionSelection(suggestionIndex: number): void;\n\n}\n"]}