{"version":3,"file":"input-autocomplete.js","sourceRoot":"","sources":["../../src/input-autocomplete.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAkB,IAAI,EAAE,MAAM,UAAU,CAAC;AAChD,OAAO,EAAE,aAAa,EAAE,MAAM,4BAA4B,CAAC;AAI3D,OAAO,EAAE,qBAAqB,EAAE,MAAM,2BAA2B,CAAC;AAElE,MAAM,mBAAmB,GAAG,uBAAuB,CAAC;AAGpD,IAAa,iBAAiB,GAA9B,MAAa,iBAAkB,SAAQ,qBAAqB;IAIxD,MAAM;;QACF,OAAO,IAAI,CAAA;sBACG,IAAI,CAAC,UAAU,CAAC,OAAO;;;;;6BAKhB,IAAI,CAAC,QAAQ;6BACb,IAAI,CAAC,QAAQ;;0BAEhB,IAAI,CAAC,UAAU,CAAC,KAAK;uBACxB,IAAI,CAAC,OAAO;8BACL,IAAI,CAAC,SAAS;gCACZ,IAAI,CAAC,WAAW;0BACtB,IAAI,CAAC,IAAI;;yBAEV,IAAI,CAAC,UAAU;0BACd,IAAI,CAAC,WAAW;4BACd,IAAI,CAAC,aAAa;0BACpB,IAAI,CAAC,WAAW;;;;yBAIjB,IAAI,CAAC,UAAU,CAAC,WAAW;kBAClC,MAAA,IAAI,CAAC,wBAAwB,0CAC7B,cAAc,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE,CACvC,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;;eAE9C,CAAC;IACZ,CAAC;IAED,gBAAgB,CAAC,UAAkC,EAAE,KAAa;QAC9D,OAAO,IAAI,CAAA;;;0BAGO,GAAG,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,KAAK,CAAC;;0BAE3C,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC;+BAC/B,UAAU,CAAC,KAAK;;;kBAG7B,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,IAAI;;cAEnE,CAAC;IACX,CAAC;CACJ,CAAA;AA/CU,mCAAiB,GAAG,mBAAmB,CAAC;AAFtC,iBAAiB;IAD7B,aAAa,CAAC,mBAAmB,CAAC;GACtB,iBAAiB,CAiD7B;SAjDY,iBAAiB","sourcesContent":["import { TemplateResult, html } from 'lit-html';\nimport { customElement } from 'lit-element/lib/decorators';\n\nimport { AutoCompleteSuggestion } from './models/autocomplete-suggestion';\n\nimport { InputAutoCompleteBase } from './input-autocomplete-base';\n\nconst CUSTOM_ELEMENT_NAME = 'rx-input-autocomplete';\n\n@customElement(CUSTOM_ELEMENT_NAME)\nexport class InputAutoComplete extends InputAutoCompleteBase {\n\n    static customElementName = CUSTOM_ELEMENT_NAME;\n\n    render(): TemplateResult {\n        return html`\n        <div .class=${this.cssClasses.wrapper}>\n            <input\n                autocomplete=\"off\"\n                type=\"text\"\n\n                ?disabled=\"${this.disabled}\"\n                ?required=\"${this.required}\"\n\n                .class=\"${this.cssClasses.input}\"\n                .id=\"${this.inputId}\"\n                .inputMode=\"${this.inputMode}\"\n                .placeholder=\"${this.placeholder}\"\n                .value=\"${this.text}\"\n\n                @blur=\"${this.handleBlur}\"\n                @focus=\"${this.handleFocus}\"\n                @keydown=\"${this.handleKeyDown}\"\n                @keyup=\"${this.handleKeyUp}\"\n\n                />\n\n            <ul class=\"${this.cssClasses.suggestions}\">\n                ${this._autoCompleteSuggestions\n                ?.suggestionData.map((suggestion, index) =>\n                    this.renderSuggestion(suggestion, index))}\n            </ul>\n        </div>`;\n    }\n\n    renderSuggestion(suggestion: AutoCompleteSuggestion, index: number): TemplateResult {\n        return html`\n        <li>\n            <button\n                @click=\"${() => this.handleSuggestionSelection(index)}\"\n\n                .class=\"${this.getSuggestionsCssClasses(index)}\"\n                .data-value=\"${suggestion.value}\"\n\n                type=\"button\">\n                ${suggestion.suggestion ? suggestion.suggestion : suggestion.text}\n            </button>\n        </li>`;\n    }\n}\n"]}