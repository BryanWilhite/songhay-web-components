{"version":3,"file":"input-autocomplete.js","sourceRoot":"","sources":["../../src/input-autocomplete.ts"],"names":[],"mappings":"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","sourcesContent":["import { css, unsafeCSS, html, PropertyValues, TemplateResult } from 'lit';\nimport { customElement } from 'lit/decorators.js';\n\nimport { AutoCompleteSuggestion } from './models/autocomplete-suggestion';\n\nimport { InputAutoCompleteBase } from './input-autocomplete-base';\n\nimport { TEMPLATE_NORMALIZE_CSS } from './constants/normalize-css';\n\nconst CUSTOM_ELEMENT_NAME = 'rx-input-autocomplete';\nconst SUGGESTION_SELECTED_CSS_CLASS_NAME = 'selected';\n\n/**\n * defines rendering methods for @type {InputAutoCompleteBase}\n *\n * @export\n * @extends {InputAutoCompleteBase}\n */\n@customElement(CUSTOM_ELEMENT_NAME)\nexport class InputAutoComplete extends InputAutoCompleteBase {\n\n    /**\n     * conventional element name of this Web Component\n     */\n    static customElementName = CUSTOM_ELEMENT_NAME;\n\n    /**\n     * references the auto-complete DOM container\n     * of suggestions\n     */\n    suggestionsContainer: HTMLUListElement | null = null;\n\n    /**\n     * renders CSS according to LitElement conventions\n     */\n    static get styles() {\n        return css`\n            ${TEMPLATE_NORMALIZE_CSS}\n\n            div {\n                position: relative;\n                width: var(--input-autocomplete-width, 16em);\n                z-index: var(--input-autocomplete-z-index, 0);\n            }\n\n            div > ul {\n                left: 0;\n                list-style: none;\n                margin: 0;\n                padding: 0;\n                position: absolute;\n                right: 0;\n                z-index: calc(var(--input-autocomplete-z-index) + 1);\n            }\n\n            div > ul > li {\n                display: inline-block;\n                padding: 0;\n            }\n\n            div > ul > li > button {\n                border: var(--input-autocomplete-suggestion-border, none);\n                cursor: pointer;\n                font-weight: var(--input-autocomplete-suggestion-font-weight, normal);\n                margin: var(--input-autocomplete-suggestion-margin, 0);\n                overflow: hidden;\n                text-align: var(--input-autocomplete-suggestion-text-align, left);\n                text-overflow: var(--input-autocomplete-suggestion-text-overflow, ellipses);\n                white-space: nowrap;\n            }\n\n            div > ul > li.${unsafeCSS(SUGGESTION_SELECTED_CSS_CLASS_NAME)} > button,\n            div > ul > li > button:hover {\n                background-color: var(--input-autocomplete-suggestion-selected-background-color, #e2e2e2);\n                border: var(--input-autocomplete-suggestion-selected-border, solid #f00);\n                font-weight: var(--input-autocomplete-suggestion-selected-font-weight, bold);\n            }\n\n            div > input,\n            div > ul,\n            div > ul > li,\n            div > ul > li > button {\n                display: inline-block;\n                height: 100%;\n                margin: 0;\n                width: 100%;\n            }`;\n    }\n\n    /**\n     * conventional LitElement method\n     */\n    firstUpdated(changedProperties: PropertyValues) {\n        super.firstUpdated(changedProperties);\n        this.setSuggestionsContainer();\n    }\n\n    /**\n     * conventional LitElement method\n     */\n    render(): TemplateResult {\n\n        return html`\n        <div>\n            <input\n                autocomplete=\"off\"\n                type=\"text\"\n\n                ?disabled=\"${this.disabled}\"\n                ?required=\"${this.required}\"\n\n                .id=\"${this.inputId}\"\n                .inputMode=\"${this.inputMode}\"\n                .placeholder=\"${this.placeholder}\"\n                .value=\"${this.text}\"\n\n                @focus=\"${this.handleFocus}\"\n                @keydown=\"${this.handleKeyDown}\"\n                @keyup=\"${this.handleKeyUp}\"\n\n                />\n\n            <ul>\n                ${this._autoCompleteSuggestions\n                ?.suggestionData.map((suggestion, index) =>\n                    this.renderSuggestion(suggestion, index))}\n            </ul>\n        </div>`;\n    }\n\n    /**\n     * renders @type {AutoCompleteSuggestion}\n     */\n    renderSuggestion(data: AutoCompleteSuggestion, index: number): TemplateResult {\n        return html`\n        <li>\n            <button\n                type=\"button\"\n\n                .data-value=\"${data.value}\"\n\n                @click=\"${() => this.handleSuggestionClick(index)}\"\n                >\n                ${data.suggestion ? data.suggestion : data.text}\n            </button>\n        </li>`;\n    }\n\n    /**\n     * sets `this.suggestionsContainer`\n     */\n    setSuggestionsContainer(): void {\n        const collection = this.shadowRoot?.children;\n\n        if (!collection) {\n            console.error(`The expected \\`${HTMLCollection.name}\\` is not here.`);\n            return;\n        }\n\n        const div = Array.from(collection)\n            .find(i => i.tagName.toLowerCase() === 'div') as HTMLDivElement;\n\n        if (!div) {\n            console.error(`The expected \\`${HTMLDivElement.name}\\` is not here.`);\n            return;\n        }\n\n        this.suggestionsContainer = Array.from(div.children)\n            .find(i => i.tagName.toLowerCase() === 'ul') as HTMLUListElement;\n\n        if (!this.suggestionsContainer) {\n            console.error(`The expected \\`${HTMLUListElement.name}\\` is not here.`);\n            return;\n        }\n    }\n\n    /**\n     * handles @type {AutoCompleteSuggestion} selection\n     */\n    handleSuggestionSelection(suggestionIndex: number): void {\n        if (!this.suggestionsContainer) {\n            return;\n        }\n\n        Array\n            .from(this.suggestionsContainer.children)\n            .forEach((li, index) => {\n                if (li.classList.contains(SUGGESTION_SELECTED_CSS_CLASS_NAME)) {\n                    li.classList.remove(SUGGESTION_SELECTED_CSS_CLASS_NAME);\n                }\n\n                if (suggestionIndex === index) {\n                    li.classList.add(SUGGESTION_SELECTED_CSS_CLASS_NAME);\n                }\n            });\n    }\n}\n"]}