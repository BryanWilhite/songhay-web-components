{"version":3,"file":"autocomplete-suggestions.js","sourceRoot":"","sources":["../../src/services/autocomplete-suggestions.ts"],"names":[],"mappings":";;;;;;;;;AAEA;;;GAGG;AACH,MAAM,OAAO,uBAAuB;IA6BhC;;OAEG;IACH,YACI,sBAA2E,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,EACpG,iBAAyB,CAAC,EAC1B,WAAmB,CAAC;QAlBxB;;;WAGG;QACH,mBAAc,GAA6B,EAAE,CAAC;QAgB1C,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,SAAS;QACL,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,kBAAkB,CAAC,KAAa;QAC5B,OAAO,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,sBAAsB;QAClB,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;IACtC,CAAC;IAED;;;OAGG;IACH,iBAAiB;QACb,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACG,kBAAkB,CAAC,IAAY;;YAEjC,6BAA6B;YAE7B,MAAM,WAAW,GAAG,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAEvF,YAAY;YAEZ,IAAI,WAAW,EAAE,EAAE;gBACf,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;gBACzD,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBACxC,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC;aACrC;iBAAM;gBACH,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;aAC5B;QACL,CAAC;KAAA;CACJ","sourcesContent":["import { AutoCompleteSuggestion } from '../models/autocomplete-suggestion';\n\n/**\n * defines routines\n * for @type {AutoCompleteSuggestion} data\n */\nexport class AutoCompleteSuggestions {\n\n    /**\n     * gets/sets the maximum number\n     * of @type {AutoCompleteSuggestion} elements\n     * to display\n     */\n    maxSuggestions: number;\n\n    /**\n     * gets.sets the minimum number\n     * of text characters entered\n     * before @type {AutoCompleteSuggestion} elements\n     * are displayed\n     */\n    minInput: number;\n\n    /**\n     * gets/sets the array\n     * of @type {AutoCompleteSuggestion} data\n     */\n    suggestionData: AutoCompleteSuggestion[] = [];\n\n    /**\n     * gets/sets the generation strategy\n     * of @type {AutoCompleteSuggestion} elements\n     */\n    suggestionGenerator: (text: string) => Promise<AutoCompleteSuggestion[]>;\n\n    /**\n     * creates an instance of @type {AutoCompleteSuggestions}\n     */\n    constructor(\n        suggestionGenerator: (text: string) => Promise<AutoCompleteSuggestion[]> = () => Promise.resolve([]),\n        maxSuggestions: number = 5,\n        minInput: number = 0\n    ) {\n        this.suggestionGenerator = suggestionGenerator;\n        this.maxSuggestions = maxSuggestions;\n        this.minInput = minInput;\n    }\n\n    /**\n     * clear any @type {AutoCompleteSuggestion} data\n     */\n    clearData(): void {\n        this.suggestionData = [];\n    }\n\n    /**\n     * get @type {AutoCompleteSuggestion} datum\n     * at the specified index\n     */\n    getSuggestionDatum(index: number): AutoCompleteSuggestion {\n        return this.suggestionData[index];\n    }\n\n    /**\n     * get the @type {AutoCompleteSuggestion} data count\n     */\n    getSuggestionDataCount(): number {\n        return this.suggestionData.length;\n    }\n\n    /**\n     * return `true` when this instance\n     * has @type {AutoCompleteSuggestion} data\n     */\n    hasSuggestionData(): boolean {\n        return this.suggestionData.length > 0;\n    }\n\n    /**\n     * prepare @type {AutoCompleteSuggestion} data\n     * based on the specified text input\n     */\n    async prepareSuggestions(text: string): Promise<void> {\n\n        //#region functional members:\n\n        const textIsValid = () => (this.suggestionGenerator && (text.length >= this.minInput));\n\n        //#endregion\n\n        if (textIsValid()) {\n            const suggestions = await this.suggestionGenerator(text);\n            suggestions.splice(this.maxSuggestions);\n            this.suggestionData = suggestions;\n        } else {\n            this.suggestionData = [];\n        }\n    }\n}\n"]}